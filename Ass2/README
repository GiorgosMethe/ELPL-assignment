README for Treebank Parser, CYK
=====================================================

Elements of Language Processing and Learning 2012, University of Amsterdam.
Project One, steps 1 & 2
Georgios Methenitis & Marios Tzakris

Code written to run under Python 2.7.3 with the _argparse_ module.
Tested on Ubuntu 12.10 x64 and Windows 8 x64

Executable: run.py
=====================================================
To print the instructions for using this executable run:
$ python run.py --help.

usage: run.py [-h] [-e TREEBANK TREEBANK] [-s S_FILE] [-a A_FILE]
              [-m M_FILE M_FILE] [-ps PS_FILE PS_FILE] [-pf PF_FILE PF_FILE]
              [-pfw PFW_FILE PFW_FILE PFW_FILE] [-v V_FILE V_FILE V_FILE]

optional arguments:
  -h, --help            show this help message and exit
  -e TREEBANK TREEBANK, --treebank TREEBANK TREEBANK
                        Generate a grammar from the passed treebank
  -s S_FILE, --s_file S_FILE
                        Show grammar
  -a A_FILE, --a_file A_FILE
                        Ambiguous words
  -m M_FILE M_FILE, --m_file M_FILE M_FILE
                        Most likely productions
  -ps PS_FILE PS_FILE, --ps_file PS_FILE PS_FILE
                        CYK parser, takes a sentence as argument
  -pf PF_FILE PF_FILE, --pf_file PF_FILE PF_FILE
                        CYK parser, takes a file of sentences and prints the
                        top productions
  -pfw PFW_FILE PFW_FILE PFW_FILE, --pfw_file PFW_FILE PFW_FILE PFW_FILE
                        CYK parser, takes a file of sentences and write a file
                        of top productions
  -v V_FILE V_FILE V_FILE, --v_file V_FILE V_FILE V_FILE
                        CYK parser, takes a file of sentences and write a file
                        of top productions



Commands:
=====================================================
A grammar can be generated with the command:
$ python run.py -e <treebank> <output>
example: $ python run.py -e trainingSet grammar
=====================================================
A grammar can be shown to console with the command:
$ python run.py -s <pcfg_file_name>
example: $ python run.py -s grammar
=====================================================
4 most likely productions of a non-terminal node can 
be printed in console with the command:
$ python run.py -m <pcfg_file_name> <non-terminal node>
example: $ python run.py -m grammar NP
#### You can easily change the number of the most
probable production in run.py
=====================================================
Ambiguous words can be printed into console with:
$ python run.py -a <pcfg_file_name>
example: $ python run.py -a grammar
=====================================================
CYK parser can parse an input sentence from console with the command:
$ python run.py -ps <pcfg_file_name> <sentence>
example: $ python run.py -ps grammar "I feel good . "
=====================================================
CYK parser can parse sentences existing in a text file with the command:
$ python run.py -pf <pcfg_file_name> <sentences_file>
example: $ python run.py -pf grammar testSentences
=====================================================
CYK parser can parse sentences existing in a text file and
write top production in an output file with the command:
$ python run.py -pfw <pcfg_file_name> <sentences_file> <output_file>
example: $ python run.py -pfw grammar testSentences top_productions
=====================================================
CYK parser parse sentences to find most probable parse tree
then viterbi builds this tree and writes it into a output file:
$ python run.py -v <pcfg_file_name> <sentences_file> <output_file>
example: $ python run.py -v grammar testSentences trees
=====================================================





Module: tree_parser.py
=====================================================
This module is responisble for parsing the treebank file
and store the generated rules from it.

example output:
<id> <left_side> <right_side> <probability>
00000 TOP FRAG%%%%%NP 0.000225954658432 
00001 TOP SBAR 0.000577439682659 
00002 TOP SINV 0.0447390223695 
00003 TOP ADJP 0.000150636438955

functions:
=====================================================
createRules(): 
Takes the nodes and the level of each of them
for each sentence and then with an iterative rule produces
the rules.

saveRule(newRule): 
Saves rules into a dictionary each left
hand side node in rules holds a counter

fixProbs(): 
Generates the probability of each rule according 
the counter in the left side nodes and the number of 
appearances of its right side productions.

write_file(file_name): 
Writes the rules in output text fle in 
the above format

parse_document(inputText,start,lvl):
Takes as input the treebank
and parses the rules inside it. Assigns a level in each node
according to the parenthesis status.

fix_rules(inputString,level): 
Fixed the level of each rule due 
to the fact that some rules are located into the same parenthesis.


Module: cky.py
=====================================================
This module is responsible for parsing a sentence with
the cyk parser algorithm

example output top productions:
<left_side> <right_side>
TOP FRAG%%%%%NP 
TOP SBAR 
TOP SINV 
TOP ADJP 

functions:
=====================================================
read_pcfg(file_name):
Reads the grammar rules from the output of the pcfg
parser.
Output: writes the rulesRL dictionary

read_sentences(file_name):
Reads all sentences from the given txt file.
Output: writes sentences list

handle_unknown_words(unknown_word):
UNKNOWN right side rule,
we can decide a approximately and with a simple approach,
to give words a non terminal rule.

read_sentences_input(sentence):
Reads sentence from terminal

iterate_sentences():
iterates over all saved sentences and runs the cky parser
for each one of them

iterate_sentences_viterbi():
iterates over all saved sentences and runs the cky parser
for each one of them and then viterbi

check_unaries(chart):
iterates over all nodes into the specified chart position
and looks for unaries
Output: adds the unary rules to the specified chart position

cky_parsing(s):
cky parser from stanford slides
Output: the complete parse-forest

check_unaries_most(chart):
iterates over all nodes into the specified chart position
and looks for unaries for the most probable tree
Output: adds the unary rules to the specified chart position

check_unaries_most_d(chart):
iterates over all nodes into the specified chart position
and looks for unaries for the most probable tree on the diagonal
positions.
Output: adds the unary rules to the specified chart position

cky_parsing_most(s):
cky parser from stanford slides for the most probable tree
Output: the complete parse-forest

print_top_productions(chart,n):
prints the top production in the upper right 
corner of the chart table

Module: viterbi.py
=====================================================
This module is responsible for parsing the cyk output chart
and build the most probable tree.

functions:
=====================================================
build_tree(words,outfile): build the tree taking as input
a list of nodes with their levels

run(chart,x,y,node,words,lvl):
run the viterbi algorithm, creates a list of nodes
with a label their weights

write_treebank(treebank,file_name):
write output file for each sentence